typedef	struct tiff TIFF;
typedef	uint32 ttag_t;		
typedef	uint16 tdir_t;		
typedef	uint16 tsample_t;	
typedef	uint32 tstrip_t;	
typedef uint32 ttile_t;		
typedef	int32 tsize_t;		
typedef	void* tdata_t;		
typedef	uint32 toff_t;		
DECLARE_HANDLE(thandle_t);
typedef	unsigned char TIFFRGBValue;		
typedef struct {
	float d_mat[3][3]; 		
	float d_YCR;			
	float d_YCG;
	float d_YCB;
	uint32 d_Vrwr;			
	uint32 d_Vrwg;
	uint32 d_Vrwb;
	float d_Y0R;			
	float d_Y0G;
	float d_Y0B;
	float d_gammaR;			
	float d_gammaG;
	float d_gammaB;
} TIFFDisplay;
typedef struct {				
	TIFFRGBValue* clamptab;			
	int*	Cr_r_tab;
	int*	Cb_b_tab;
	int32*	Cr_g_tab;
	int32*	Cb_g_tab;
        int32*  Y_tab;
} TIFFYCbCrToRGB;
typedef struct {				
	int	range;		
	float	rstep, gstep, bstep;
	float	X0, Y0, Z0;			
	TIFFDisplay display;
	float	Yr2r[CIELABTORGB_TABLE_RANGE + 1];  
	float	Yg2g[CIELABTORGB_TABLE_RANGE + 1];  
	float	Yb2b[CIELABTORGB_TABLE_RANGE + 1];  
} TIFFCIELabToRGB;	
typedef struct _TIFFRGBAImage TIFFRGBAImage;
typedef void (*tileContigRoutine)
    (TIFFRGBAImage*, uint32*, uint32, uint32, uint32, uint32, int32, int32,
	unsigned char*);
typedef void (*tileSeparateRoutine)
    (TIFFRGBAImage*, uint32*, uint32, uint32, uint32, uint32, int32, int32,
	unsigned char*, unsigned char*, unsigned char*, unsigned char*);
struct _TIFFRGBAImage {
	TIFF*	tif;				
	int	stoponerr;			
	int	isContig;			
	int	alpha;				
	uint32	width;				
	uint32	height;				
	uint16	bitspersample;			
	uint16	samplesperpixel;		
	uint16	orientation;			
	uint16	req_orientation;		
	uint16	photometric;			
	uint16*	redcmap;			
	uint16*	greencmap;
	uint16*	bluecmap;						
	int	(*get)(TIFFRGBAImage*, uint32*, uint32, uint32);
	union {
	    void (*any)(TIFFRGBAImage*);
	    tileContigRoutine	contig;
	    tileSeparateRoutine	separate;
	} put;					
	TIFFRGBValue* Map;			
	uint32** BWmap;				
	uint32** PALmap;			
	TIFFYCbCrToRGB* ycbcr;			
        TIFFCIELabToRGB* cielab;		
        int	row_offset;
        int     col_offset;
};
typedef	int (*TIFFInitMethod)(TIFF*, int);
typedef struct {
	char*		name;
	uint16		scheme;
	TIFFInitMethod	init;
} TIFFCodec;



typedef	void (*TIFFErrorHandler)(const char*, const char*, va_list);
typedef	void (*TIFFErrorHandlerExt)(thandle_t, const char*, const char*, va_list);
typedef	tsize_t (*TIFFReadWriteProc)(thandle_t, tdata_t, tsize_t);
typedef	toff_t (*TIFFSeekProc)(thandle_t, toff_t, int);
typedef	int (*TIFFCloseProc)(thandle_t);
typedef	toff_t (*TIFFSizeProc)(thandle_t);
typedef	int (*TIFFMapFileProc)(thandle_t, tdata_t*, toff_t*);
typedef	void (*TIFFUnmapFileProc)(thandle_t, tdata_t, toff_t);
typedef	void (*TIFFExtendProc)(TIFF*); 

typedef	struct {
	ttag_t	field_tag;		
	short	field_readcount;	
	short	field_writecount;	
	TIFFDataType field_type;	
        unsigned short field_bit;	
	unsigned char field_oktochange;	
	unsigned char field_passcount;	
	char	*field_name;		
} TIFFFieldInfo;
typedef struct _TIFFTagValue {
    const TIFFFieldInfo  *info;
    int             count;
    void           *value;
} TIFFTagValue;
typedef	int (*TIFFVSetMethod)(TIFF*, ttag_t, va_list);
typedef	int (*TIFFVGetMethod)(TIFF*, ttag_t, va_list);
typedef	void (*TIFFPrintMethod)(TIFF*, FILE*, long);
typedef struct {
    TIFFVSetMethod	vsetfield;	
    TIFFVGetMethod	vgetfield;	
    TIFFPrintMethod	printdir;	
} TIFFTagMethods;

typedef	signed char int8;	
typedef	unsigned char uint8;
typedef	short int16;
typedef	unsigned short uint16;	

#if SIZEOF_INT == 4
typedef	int int32;
typedef	unsigned int uint32;	
#elif SIZEOF_LONG == 4
typedef	long int32;
typedef	unsigned long uint32;	
#endif;
enum TIFFIgnoreSense 
{
	TIS_STORE,
	TIS_EXTRACT,
	TIS_EMPTY
};
typedef	struct {
	uint16	tiff_magic;	
	uint16	tiff_version;		
	uint32	tiff_diroff;	} TIFFHeader;
typedef	struct {
	uint16		tdir_tag;	
	uint16		tdir_type;	
	uint32		tdir_count;	
	uint32		tdir_offset;	
} TIFFDirEntry;
typedef	enum {
	TIFF_NOTYPE	= 0,	
	TIFF_BYTE	= 1,	
	TIFF_ASCII	= 2,	
	TIFF_SHORT	= 3,	
	TIFF_LONG	= 4,	
	TIFF_RATIONAL	= 5,	
	TIFF_SBYTE	= 6,	
	TIFF_UNDEFINED	= 7,	
	TIFF_SSHORT	= 8,	
	TIFF_SLONG	= 9,	
	TIFF_SRATIONAL	= 10,	
	TIFF_FLOAT	= 11,	
	TIFF_DOUBLE	= 12,	
	TIFF_IFD	= 13	
} TIFFDataType;